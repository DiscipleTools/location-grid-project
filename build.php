<?php

// Extend PHP limits for large processing
ini_set('memory_limit', '50000M');

$start_timestamp = date('H:i:s');

print '**************************************************************'. PHP_EOL;
print date('H:i:s') . ' | START SCRIPT'. PHP_EOL;
print '**************************************************************'. PHP_EOL;


/*************************************************************************************************************/
/* SETUP ENVIORNMENT
/*************************************************************************************************************/
$table = [
    'lg' => 'location_grid',
    'geo' => 'location_grid_geometry',
    'dt' => 'dt_location_grid',
];
$output = [
    'root' => getcwd() . '/',
];
foreach ( $output as $dirname ) {
    if ( ! is_dir( $dirname ) ) {
        mkdir($dirname, 0755, true);
    }
}

// define database connection
if ( ! file_exists( 'connect_params.json') ) {
    $content = '{"host": "","username": "","password": "","database": ""}';
    file_put_contents( 'connect_params.json', $content );
}
$params = json_decode( file_get_contents( "connect_params.json" ), true );
if ( empty( $params['host'] ) ) {
    print 'You have just created the connect_params.json file, but you still need to add database connection information.
Please, open the connect_params.json file and add host, username, password, and database information.' . PHP_EOL;
    exit();
}
$con = mysqli_connect( $params['host'], $params['username'], $params['password'],$params['database']);
if (!$con) {
    echo 'mysqli Connection FAILED. Check parameters inside connect_params.json file.' . PHP_EOL;
    exit();
}

// test expected location_grid table
$exists = mysqli_query( $con, "
        SELECT 1 FROM {$table['lg']} LIMIT 1;
    " );
if ( ! $exists ) {
    print 'Could not connect with location_grid source table.' . PHP_EOL;
    exit();
}
// test expected location_grid_geometry table
$exists = mysqli_query( $con, "
        SELECT 1 FROM {$table['geo']} LIMIT 1;
    " );
if ( ! $exists ) {
    print 'Could not connect with location_grid_geometry source table.' . PHP_EOL;
    exit();
}
/*************************************************************************************************************/
// END SETUP
/*************************************************************************************************************/


/** CREATE README FILE */
$readme_content_beginning = '
# LOCATION GRID PROJECT

The Location Grid Project hopes to offer a cross-referenced grid for reporting on movement progress across the planet, 
while at the same time is location sensitive for activity in dangerous or anti-christian locations and compliance with 
increasing privacy laws like GDPR.

The project serves to support the vision of consistently tracking church planting movement efforts globally in a way
 that allows networks and different organizations to share location sensitive reports to visualize and respond to
 areas of disciple making movement and areas where there is no disciple making movement.

The project offers a global grid of unique location ids for countries, states, and counties, 
longitude/latitude, populations for those administrative areas, and the supporting geojson polygon files for 
lightweight application display. 

The polygon source data began with GADM public polygon sets and then the geojson files were generated and keyed to the grid system. 

The administrative boundary information (north, south, east, west) has been generated from currently available 
polygons by the Location Grid Project. 

Longitude and latitude centerpoint generated from the polygon data.

The hierarchy data in columns parent_id, admin0_grid_id, admin1_grid_id, admin2_grid_id, admin3_grid_id, admin4_grid_id, admin5_grid_id has been
generated by the Location Grid Project.

-----

* [Databases](#databases)
    * [The Location Grid Table](#the-location_grid-table)
    * [The location_grid_geometry table](#the-location_grid_geometry-table)
    * [The location-grid-gis-layers](#the-location-grid-gis-layers)
* [Grid_ID Ranges](#grid_id-ranges)
* [Table Structures](#table-structures)
* [Data](#data)
    * [Number Of Records Per Country and Level](#number-of-records-per-country-and-level)
    * [Number of Records by Levels](#number-of-records-by-levels)
    * [GIS Layers Download Links ](#gis-layers-download-links)
    * [Countries With Levels of Administration](#countries-with-levels-of-administration)
* [Location Grid Hierarchy (txt file)](hierarchy.txt)

-----


## DATABASES

### The location_grid table 
The location grid table is a MYSQL table with 380,000 records for the administrative levels of the world. Based
on the GADM polygon set. This table adds hierarchy, geonames cross-reference, bounding boxes, longitude and latitude for centerpoint,
country_codes, and level descriptions.

[Download Location Grid SQL Table](https://storage.googleapis.com/location-grid-source-data/location_grid.sql.zip)
(14.77 MB)



### The location_grid_geometry table 
The location_grid_geometry table has all polygons for each of the 380,000 administrative units cross-referenced
to the location_grid table by grid_id.

[Download Location_Grid_Geometry](https://storage.googleapis.com/location-grid-source-data/location_grid_geometry.sql.zip)
 (1.81 GB)
 
 
### The location-grid-mirror
The location grid mirror is a folder containing three folders: low, high, collection. The low and high
folders contain .geojson files named by grid_id containing the polygon or
multipolygon for the administrative unit and properties containing name, level names, and centerpoints. Those files
in the low folder are compressed for web delivery, the high folder contains full resolution polygons. The 
collection folder contains .geojson files named by grid_id that contain a collection of the next
level administrative polygons. i.e. the {state of colorado}.geojson file contains all the counties for Colorado
in the single .geojson file. Each sub-administrative unit in the collection has properties including name, lng/lat centerpoint,
and admin level data.

[Download Location Grid Mirror](https://storage.googleapis.com/location-grid-source-data/location-grid-mirror.zip)
(4.06 GB)

### The location-grid-gis-layers
The location grid gis layers is an export of the location grid building the location grid in layers more approriate for importing
into GIS systems. The layers are arranges as {2 digit language code}_(administrative level name}.geojson. For example, "us_admin2.geojson"
contains all the Administrative 2 (counties or admin2) level polygons for the United States (us).

[Download Location GIS Layers](https://storage.googleapis.com/location-grid-source-data/location-grid-gis-layers.zip)
(1.83 GB)

## Grid_ID Ranges

| Range | Description |
| ------ | ----- |
|100,000,000 - 200,000,000 | One hundred million to two hundred million is the id range for the location grid global admin levels |
|1,000,000,000 + | 1 billion and higher is reserved for custom locations |

## TABLE STRUCTURES

location_grid table:
```apacheconfig
CREATE TABLE `location_grid` (
  `grid_id` bigint(20) NOT NULL AUTO_INCREMENT,
  `name` varchar(200) NOT NULL DEFAULT \'\',
  `level` float DEFAULT NULL,
  `level_name` varchar(7) DEFAULT NULL,
  `country_code` varchar(10) DEFAULT NULL,
  `admin0_code` varchar(10) DEFAULT NULL,
  `admin1_code` varchar(20) DEFAULT NULL,
  `admin2_code` varchar(20) DEFAULT NULL,
  `admin3_code` varchar(20) DEFAULT NULL,
  `admin4_code` varchar(20) DEFAULT NULL,
  `admin5_code` varchar(20) DEFAULT NULL,
  `parent_id` bigint(20) DEFAULT NULL,
  `admin0_grid_id` bigint(20) DEFAULT NULL,
  `admin1_grid_id` bigint(20) DEFAULT NULL,
  `admin2_grid_id` bigint(20) DEFAULT NULL,
  `admin3_grid_id` bigint(20) DEFAULT NULL,
  `admin4_grid_id` bigint(20) DEFAULT NULL,
  `admin5_grid_id` bigint(20) DEFAULT NULL,
  `longitude` float DEFAULT NULL,
  `latitude` float DEFAULT NULL,
  `north_latitude` float DEFAULT NULL,
  `south_latitude` float DEFAULT NULL,
  `west_longitude` float DEFAULT NULL,
  `east_longitude` float DEFAULT NULL,
  `population` bigint(20) NOT NULL DEFAULT \'0\',
  `modification_date` date DEFAULT NULL,
  `geonames_ref` bigint(20) DEFAULT NULL,
  `wikidata_ref` varchar(20) DEFAULT NULL,
  PRIMARY KEY (`grid_id`),
  KEY `level` (`level`),
  KEY `latitude` (`latitude`),
  KEY `longitude` (`longitude`),
  KEY `admin0_code` (`admin0_code`),
  KEY `admin1_code` (`admin1_code`),
  KEY `admin2_code` (`admin2_code`),
  KEY `admin3_code` (`admin3_code`),
  KEY `admin4_code` (`admin4_code`),
  KEY `country_code` (`country_code`),
  KEY `north_latitude` (`north_latitude`),
  KEY `south_latitude` (`south_latitude`),
  KEY `parent_id` (`parent_id`),
  KEY `west_longitude` (`west_longitude`),
  KEY `east_longitude` (`east_longitude`),
  KEY `admin5_code` (`admin5_code`),
  KEY `admin0_grid_id` (`admin0_grid_id`),
  KEY `admin1_grid_id` (`admin1_grid_id`),
  KEY `admin2_grid_id` (`admin2_grid_id`),
  KEY `admin3_grid_id` (`admin3_grid_id`),
  KEY `admin4_grid_id` (`admin4_grid_id`),
  KEY `admin5_grid_id` (`admin5_grid_id`),
  KEY `level_name` (`level_name`),
  FULLTEXT KEY `name` (`name`)
) ENGINE=InnoDB AUTO_INCREMENT=100386738 DEFAULT CHARSET=utf8;
```

location_grid_geometry:
```apacheconfig
CREATE TABLE `location_grid_geometry` (
  `grid_id` bigint(20) NOT NULL AUTO_INCREMENT,
  `geoJSON` longtext,
  PRIMARY KEY (`grid_id`)
) ENGINE=InnoDB AUTO_INCREMENT=100386738 DEFAULT CHARSET=utf8;
```

# DATA
';


$content = PHP_EOL . '';

/**
 * Number Of Records Per Country and Level
 */
$query = mysqli_query( $con, "
    SELECT 
    (SELECT n.name FROM {$table['lg']} as n WHERE n.admin0_code = l.admin0_code AND level = 0 LIMIT 1) as name, 
    l.admin0_code, 
    l.level_name, 
    count(*) as count
    FROM {$table['lg']} as l 
    GROUP BY l.admin0_code, l.level_name;
" );
$break_down = mysqli_fetch_all($query, MYSQLI_ASSOC);

$content .= '

## Number Of Records Per Country and Level

| Name | Admin0 Code | Level Name | Number of Records |
| ---- | ---- | ---- | ---- |
';

foreach ( $break_down as $value ) {
    $content .= '|' . $value['name'] .'|' . $value['admin0_code'] .'|' . $value['level_name'] .'|' . $value['count'] .'|' . PHP_EOL;
}

$content .= PHP_EOL . PHP_EOL;





/**
 * Numbers of Records by Levels
 */
$query = mysqli_query( $con, "
    SELECT level_name, count(*) as count FROM {$table['lg']} GROUP BY level_name;
" );
$level_list = mysqli_fetch_all($query, MYSQLI_ASSOC);

$content .= '

## Number of Records by Levels

| Level Name | Number of Records |
| ---- | ---- | 
';

foreach ( $level_list as $value ) {
    $content .= '|' . $value['level_name'] .'|' . $value['count'] .'|' . PHP_EOL;
}

$content .= PHP_EOL;



/**
 * GIS File List
 */
$query = mysqli_query( $con, "
    SELECT 
    (SELECT n.name FROM {$table['lg']} as n WHERE n.admin0_code = l.admin0_code AND level = 0 LIMIT 1) as name,
    l.country_code,
    l.admin0_code, 
    l.level_name, 
    count(*) as count
    FROM {$table['lg']} as l 
    GROUP BY l.admin0_code, l.level_name, l.country_code;
" );
$break_down = mysqli_fetch_all($query, MYSQLI_ASSOC);

$content .= '

## GIS Layers Download Links 

| Name | Admin0 Code | Level Name | Number of Polygons | GIS Layer Link |
| ---- | ---- | ---- | ---- | ---- |
';

foreach ( $break_down as $value ) {
    if ( $value['level_name'] === 'world') {
        continue;
    }
    $content .= '|' . $value['name'] .'|' . $value['admin0_code'] .'|' . $value['level_name'] .'|' . $value['count'] .'|' . '['.strtolower( $value['admin0_code'] ).'_'.strtolower( $value['level_name'] ) .'.geojson](https://storage.googleapis.com/location-grid-gis-layers/'.strtolower( $value['admin0_code'] ).'_'.strtolower( $value['level_name'] ) .'.geojson) |'  . PHP_EOL;
}

$content .= PHP_EOL . PHP_EOL;



/**
 * Countries per Admin Level
 */
$query = mysqli_query( $con, "
    SELECT 
    (SELECT n.name FROM {$table['lg']} as n WHERE n.admin0_code = l.admin0_code AND level = 0 LIMIT 1) as name, 
    l.admin0_code, 
    l.level_name, 
    count(*) as count
    FROM {$table['lg']} as l 
    GROUP BY l.admin0_code, l.level_name;
" );
$break_down = mysqli_fetch_all($query, MYSQLI_ASSOC);

$content .= PHP_EOL . '## Countries With Levels of Administration'. PHP_EOL. PHP_EOL;

$admin_level = [];
foreach ( $break_down as $value ) {
    if ( $value['level_name'] === 'world') {
        continue;
    }
    if ( ! isset( $admin_level[$value['level_name']] ) ) {
        $admin_level[$value['level_name']] = [];
    }
    $admin_level[$value['level_name']][] = $value;
}

foreach ( $admin_level as $key => $level ) {

    $content .= PHP_EOL . PHP_EOL . '### ' . strtoupper( $key ) . PHP_EOL  . 'These countries have `' . $key . '` level records and polygons:'. PHP_EOL . PHP_EOL ;
    foreach ( $level as $index => $value ) {
        if ( $index !== 0 ) {
            $content .= ', ';
        }
        $content .= $value['name'];
    }
    $content .= PHP_EOL . PHP_EOL . '-----' . PHP_EOL . PHP_EOL;

}

$content .= PHP_EOL . PHP_EOL;



$readme_content_ending = '';

file_put_contents( $folders['root'] . 'README.md', $readme_content_beginning . $content . $readme_content_ending );
print '#';
/** END CREATE CENSUS FILE */





/*******************************************************************************************************
 *
 * Build Hierarchy Files
 *
 *******************************************************************************************************/
print '#';
// build list array
$grid_id = '';
$response = [];
// pre-start list
$start_grid_id = 1;
$parent_object = mysqli_query( $con, "
        SELECT parent_id, grid_id as id, name 
          FROM {$table['lg']} 
          WHERE parent_id = {$start_grid_id} 
          ORDER BY name ASC;
    " );
$parent = mysqli_fetch_all($parent_object, MYSQLI_ASSOC);
$response['list'] = $parent;
// build full results
$all_object = mysqli_query( $con, "
        SELECT parent_id, grid_id as id, name 
        FROM {$table['lg']};
    " );
$all = mysqli_fetch_all($all_object, MYSQLI_ASSOC);
if ( empty( $all ) ) {
    _no_results();
}
$menu_data = prepare_menu_array( $all );
$response['text'] = PHP_EOL . 'LOCATION GRID HIERARCHY' . PHP_EOL . PHP_EOL . build_locations_html_list( $start_grid_id, $menu_data, 0, 10 );
function build_locations_html_list( $parent_id, $menu_data, $gen, $depth_limit ) {
    $list = '';
    if ( isset( $menu_data['parents'][$parent_id] ) && $gen < $depth_limit ) {
        $gen++;
        foreach ($menu_data['parents'][$parent_id] as $item_id)
        {
            switch( $gen ) {
                case '0':
                    $list .= '';
                    break;
                case '1':
                    $list .= '';
                    break;
                case '2':
                    $list .= '---- ';
                    break;
                case '3':
                    $list .= '---- ---- ';
                    break;
                case '4':
                    $list .= '---- ---- ---- ';
                    break;
                case '5':
                    $list .= '---- ---- ---- ---- ';
                    break;
                case '6':
                    $list .= '---- ---- ---- ---- ---- ';
                    break;
                case '7':
                    $list .= '---- ---- ---- ---- ---- ---- ';
                    break;
            }
            $list .= $menu_data['items'][ $item_id ]['name'] . ' (' . $item_id . ')' . PHP_EOL;
            if ( $gen === 1 ) {
                $list .= PHP_EOL;
            }
            $sub = build_locations_html_list( $item_id, $menu_data, $gen, $depth_limit );
            if ( ! empty( $sub ) ) {
                $list .= $sub;
            }
            if ( $gen === 1 ) {
                $list .= PHP_EOL . PHP_EOL . '-------------------------------------------------------------------------------------------' . PHP_EOL . PHP_EOL . PHP_EOL;
            }
        }
    }
    return $list;
}
function prepare_menu_array( $query) {
    // prepare special array with parent-child relations
    $menu_data = array(
        'items' => array(),
        'parents' => array()
    );
    foreach ( $query as $menu_item )
    {
        $menu_data['items'][$menu_item['id']] = $menu_item;
        $menu_data['parents'][$menu_item['parent_id']][] = $menu_item['id'];
    }
    return $menu_data;
}
function _no_results() {
    return 'No Results';
}

file_put_contents( $folders['root'] . 'hierarchy.txt', $response['text'] );
print '#';


print '**************************************************************'. PHP_EOL;
print date('H:i:s') . ' | END SCRIPT'. PHP_EOL;
print '**************************************************************'. PHP_EOL;
mysqli_close($con);
die();
























/**
 * NOTES
 * This is the project file builder script
 * NOTE: It requires the saturation_grid_project database table installed, and database connection established in con.php
 *
 * Creates:
 * README.md
 * totals.txt
 * hierarchy.txt
 * polygon/available_polygons.json
 * polygon/available_polygons.csv
 * polygon_collection/available_polygons.json
 * polygon_collection/available_polygons.csv
 * points_collection/available_polygons.json
 * points_collection/available_polygons.csv
 * docs/missing_boundingbox_info.txt
 * docs/missing_hierarchy.txt
 * docs/missing_polygon_collection.txt
 * docs/missing_populations.txt
 * docs/README.md
 */
//require_once( 'con.php' );
//
//if ( isset( $argv[1] ) ) {
//    if ( isset( $argv[1] ) && $argv[1] === '--quality_check' ) {
//        quality_check( $folders, $output );
//    }
//}
//
//
//print 'Build Files' . PHP_EOL;
//print '#';
//
//
//
///** FOLDERS */
//if ( ! file_exists( $folders['root'] ) ) {
//    print date('H:i:s') . ' | Folder Not Found. ' . $folders['root'] . PHP_EOL;
//    exit;
//}
///** END FOLDERS*/
//print '#';
//
//
///** TOTALS */
//$totals = [];
//$totals['counts'] = [
//    'All Rows' => 0,
//    'Country' => 0,
//    'Admin1' => 0,
//    'Admin2' => 0,
//    'Admin3' => 0,
//];
//$totals['polygon_collection'] = [
//    'Countries' => 0,
//    'States' => 0,
//];
//$totals['polygon'] = [
//    'Countries' => 0,
//    'States' => 0,
//    'Counties' => 0,
//];
//$totals['point_collection'] = [
//    'Countries' => 0,
//    'States' => 0,
//];
//$totals['population'] = [
//    'Total' => 0,
//    'Countries' => 0,
//    'States' => 0,
//    'Counties' => 0,
//];
//$totals['bbox'] = [
//    'Countries' => 0,
//    'States' => 0,
//    'Counties' => 0,
//];
//
//$missing = [];
//$missing['polygon_collection'] = [
//    'Countries' => 0,
//    'States' => 0,
//];
//$missing['polygon'] = [
//    'Countries' => 0,
//    'States' => 0,
//    'Counties' => 0,
//];
//$missing['point_collection'] = [
//    'Countries' => 0,
//    'States' => 0,
//];
//$missing['population'] = [
//    'Total' => 0,
//    'Countries' => 0,
//    'States' => 0,
//    'Counties' => 0,
//];
//$missing['bbox'] = [
//    'Countries' => 0,
//    'States' => 0,
//    'Counties' => 0,
//];
///** END TOTALS */
//
//
///** QUERIES */
//$total_raw = mysqli_query( $con, "
//        SELECT ('All Rows') as level, count(*) as count
//        FROM {$tables['geonames']} as g
//    " );
//$total = mysqli_fetch_all($total_raw, MYSQLI_ASSOC);
//
//$counts_results = mysqli_query( $con, "
//        SELECT g.level, count(g.level) as count
//        FROM {$tables['geonames']} as g
//        GROUP BY g.level;
//    " );
//$counts = mysqli_fetch_all($counts_results, MYSQLI_ASSOC);
//
//$country_results = mysqli_query( $con, "
//        SELECT g.geonameid, g.level, g.name
//        FROM {$tables['geonames']} as g
//        WHERE g.level = 'country'
//        ORDER BY g.name ASC;
//    " );
//$countries = mysqli_fetch_all($country_results, MYSQLI_ASSOC);
//
//$admin1_results = mysqli_query( $con, "
//        SELECT g.geonameid, g.name, g.level, c.name as country
//        FROM {$tables['geonames']} as g
//        LEFT JOIN  {$tables['geonames']} as c ON g.country_geonameid=c.geonameid
//        WHERE g.level = 'admin1'
//        ORDER BY g.country_code, g.name ASC;
//    " );
//$states = mysqli_fetch_all($admin1_results, MYSQLI_ASSOC);
//
//$admin2_results = mysqli_query( $con, "
//        SELECT g.geonameid, g.name, g.level, c.name as country, s.name as state
//        FROM {$tables['geonames']} as g
//        LEFT JOIN  {$tables['geonames']} as c ON g.country_geonameid=c.geonameid
//        LEFT JOIN  {$tables['geonames']} as s ON g.admin1_geonameid=s.geonameid
//        WHERE g.level = 'admin2'
//        ORDER BY g.country_code, s.name, g.name ASC;
//    " );
//$counties = mysqli_fetch_all($admin2_results, MYSQLI_ASSOC);
//
//$population_results = mysqli_query( $con, "
//        SELECT g.geonameid, g.level, g.name, g.population, c.name as country
//        FROM {$tables['geonames']} as g
//        LEFT JOIN  {$tables['geonames']} as c ON g.country_geonameid=c.geonameid
//        WHERE g.population = 0;
//    " );
//$missing_population = mysqli_fetch_all($population_results, MYSQLI_ASSOC);
//
//$population_results = mysqli_query( $con, "
//        SELECT g.geonameid, g.level, g.name, g.population, c.name as country
//        FROM {$tables['geonames']} as g
//        LEFT JOIN  {$tables['geonames']} as c ON g.country_geonameid=c.geonameid
//        WHERE g.population != 0;
//    " );
//$found_population = mysqli_fetch_all($population_results, MYSQLI_ASSOC);
//
//$bbox_results = mysqli_query( $con, "
//        SELECT g.geonameid, g.level, g.name, c.name as country
//        FROM {$tables['geonames']} as g
//        LEFT JOIN  {$tables['geonames']} as c ON g.country_geonameid=c.geonameid
//        WHERE g.north_latitude IS NULL;
//    " );
//$missing_bbox = mysqli_fetch_all($bbox_results, MYSQLI_ASSOC);
//
//$bbox_results = mysqli_query( $con, "
//        SELECT g.geonameid, g.level, g.name, c.name as country
//        FROM {$tables['geonames']} as g
//        LEFT JOIN  {$tables['geonames']} as c ON g.country_geonameid=c.geonameid
//        WHERE g.north_latitude IS NOT NULL;
//    " );
//$found_bbox = mysqli_fetch_all($bbox_results, MYSQLI_ASSOC);
//
//$hierarchy_results = mysqli_query( $con, "
//        SELECT g.geonameid, g.name, g.feature_code, g.country_code
//        FROM {$tables['geonames']} as g
//        WHERE g.parent_id IS NULL
//        ORDER BY g.name ASC;
//    " );
//$missing_hierarchy = mysqli_fetch_all($hierarchy_results, MYSQLI_ASSOC);
///** END QUERIES */
//print '#';
//
//
//
//
///** BUFFER CENSUS OUTPUT */
//ob_start();
//print '
//**********************************************************************
//*                                                                    *
//*    CURRENT TOTALS OF SATURATION GRID PROJECT                       *
//*                                                                    *
//**********************************************************************
//' . PHP_EOL. PHP_EOL;
//
//print 'Geonames Data Source Totals:' . PHP_EOL;
//print '**************************************' . PHP_EOL;
//$order =[];
//foreach ( $counts as $row ) {
//    if ( ! empty( $row['level'] ) ) {
//        $level = ucwords( $row['level']);
//        $totals['counts'][$level] = $row;
//    }
//}
//$totals['counts']['All Rows'] = $total[0];
//foreach ( $totals['counts'] as $row ) {
//    print ucwords( $row['level'] ) . ' : ' . $row['count'] . PHP_EOL;
//}
//
//
//print PHP_EOL. PHP_EOL . 'Complete:' . PHP_EOL;
//print '**************************************' . PHP_EOL;
//
//print PHP_EOL . '-- Polygon_Collection Folder --' . PHP_EOL;
//foreach( $countries as $country ) {
//    if ( file_exists( $folders['polygon_collection'] . $country['geonameid'] .  '.geojson') ) {
//        $totals['polygon_collection']['Countries']++;
//    }
//}
//foreach( $states as $admin1 ) {
//    if ( file_exists( $folders['polygon_collection'] . $admin1['geonameid'] .  '.geojson') ) {
//        $totals['polygon_collection']['States']++;
//    }
//}
//foreach ( $totals['polygon_collection'] as $key => $total ) {
//    print ucwords( $key ) . ' : ' . $total . PHP_EOL;
//}
//
//
//print PHP_EOL . '-- Polygon Folder (singles) --' . PHP_EOL;
//foreach( $countries as $country ) {
//    if ( file_exists( $folders['polygon'] . $country['geonameid'] .  '.geojson') ) {
//        $totals['polygon']['Countries']++;
//    }
//}
//foreach( $states as $admin1 ) {
//    if ( file_exists( $folders['polygon'] . $admin1['geonameid'] .  '.geojson') ) {
//        $totals['polygon']['States']++;
//    }
//}
//foreach( $counties as $admin2 ) {
//    if ( file_exists( $folders['polygon'] . $admin2['geonameid'] .  '.geojson') ) {
//        $totals['polygon']['Counties']++;
//    }
//}
//foreach ( $totals['polygon'] as $key => $total ) {
//    print ucwords( $key ) . ' : ' . $total . PHP_EOL;
//}
//
//
//print PHP_EOL . '-- Point_Collection Folder --' . PHP_EOL;
//foreach( $countries as $country ) {
//    if ( file_exists( $folders['point_collection'] . $country['geonameid'] .  '.geojson') ) {
//        $totals['point_collection']['Countries']++;
//    }
//}
//foreach( $states as $admin1 ) {
//    if ( file_exists( $folders['point_collection'] . $admin1['geonameid'] .  '.geojson') ) {
//        $totals['point_collection']['States']++;
//    }
//}
//foreach ( $totals['point_collection'] as $key => $total ) {
//    print ucwords( $key ) . ' : ' . $total . PHP_EOL;
//}
//
//print PHP_EOL . '-- Populations in Data Source --' . PHP_EOL;
//foreach( $found_population as $population ) {
//    $totals['population']['Total']++;
//}
//foreach( $found_population as $population ) {
//    if ( $population['level'] === 'country' ) {
//        $totals['population']['Countries']++;
//    }
//}
//foreach( $found_population as $population ) {
//    if ( $population['level'] === 'admin1' ) {
//        $totals['population']['States']++;
//    }
//}
//foreach( $found_population as $population ) {
//    if ( $population['level'] === 'admin2' ) {
//        $totals['population']['Counties']++;
//    }
//}
//foreach ( $totals['population'] as $key => $total ) {
//    print ucwords( $key ) . ' : ' . $total . PHP_EOL;
//}
//
//print PHP_EOL . '-- BBox Info in Data Source --' . PHP_EOL;
//foreach( $found_bbox as $value ) {
//    if ( $value['level'] === 'country' ) {
//        $totals['bbox']['Countries']++;
//    }
//}
//foreach( $found_bbox as $value ) {
//    if ( $value['level'] === 'admin1' ) {
//        $totals['bbox']['States']++;
//    }
//}
//foreach( $found_bbox as $value ) {
//    if ( $value['level'] === 'admin2' ) {
//        $totals['bbox']['Counties']++;
//    }
//}
//foreach ( $totals['bbox'] as $key => $total ) {
//    print ucwords( $key ) . ' : ' . $total . PHP_EOL;
//}
//
//
//
//print PHP_EOL. PHP_EOL .PHP_EOL. PHP_EOL . 'Missing:' . PHP_EOL;
//print '**************************************' . PHP_EOL ;
//
//print PHP_EOL . '-- Polygon_Collection Folder --' . PHP_EOL;
//foreach( $states as $admin1 ) {
//    if ( ! file_exists( $folders['polygon_collection'] . $admin1['geonameid'] .  '.geojson') ) {
//        $missing['polygon_collection']['States']++;
//    }
//}
//foreach( $countries as $country ) {
//    if ( ! file_exists( $folders['polygon_collection'] . $country['geonameid'] .  '.geojson') ) {
//        $missing['polygon_collection']['Countries']++;
//    }
//}
//foreach ( $missing['polygon_collection'] as $key => $total ) {
//    print ucwords( $key ) . ' : ' . $total . PHP_EOL;
//}
//
//
//print PHP_EOL . '-- Polygon Folder --' . PHP_EOL;
//foreach( $counties as $admin2 ) {
//    if ( ! file_exists( $folders['polygon'] . $admin2['geonameid'] .  '.geojson') ) {
//        $missing['polygon']['Counties']++;
//    }
//}
//foreach( $states as $admin1 ) {
//    if ( ! file_exists( $folders['polygon'] . $admin1['geonameid'] .  '.geojson') ) {
//        $missing['polygon']['States']++;
//    }
//}
//foreach( $countries as $country ) {
//    if ( ! file_exists( $folders['polygon'] . $country['geonameid'] .  '.geojson') ) {
//        $missing['polygon']['Countries']++;
//    }
//}
//foreach ( $missing['polygon'] as $key => $total ) {
//    print ucwords( $key ) . ' : ' . $total . PHP_EOL;
//}
//
//
//print PHP_EOL . '-- Point_Collection Folder --' . PHP_EOL;
//foreach( $states as $admin1 ) {
//    if ( ! file_exists( $folders['point_collection'] . $admin1['geonameid'] .  '.geojson') ) {
//        $missing['point_collection']['States']++;
//    }
//}
//foreach( $countries as $country ) {
//    if ( ! file_exists( $folders['point_collection'] . $country['geonameid'] .  '.geojson') ) {
//        $missing['point_collection']['Countries']++;
//    }
//}
//foreach ( $missing['point_collection'] as $key => $total ) {
//    print ucwords( $key ) . ' : ' . $total . PHP_EOL;
//}
//
//
//print PHP_EOL . '-- Populations in Data Source --' . PHP_EOL;
//foreach( $missing_population as $population ) {
//    $missing['population']['Total']++;
//}
//foreach( $missing_population as $population ) {
//    if ( $population['level'] === 'country' ) {
//        $missing['population']['Countries']++;
//    }
//}
//foreach( $missing_population as $population ) {
//    if ( $population['level'] === 'admin1' ) {
//        $missing['population']['States']++;
//    }
//}
//foreach( $missing_population as $population ) {
//    if ( $population['level'] === 'admin2' ) {
//        $missing['population']['Counties']++;
//    }
//}
//foreach ( $missing['population'] as $key => $total ) {
//    print ucwords( $key ) . ' : ' . $total . PHP_EOL;
//}
//
//
//print PHP_EOL . '-- BBox Info in Data Source --' . PHP_EOL;
//foreach( $missing_bbox as $population ) {
//    $missing['population']['Total']++;
//}
//foreach( $missing_bbox as $value ) {
//    if ( $value['level'] === 'country' ) {
//        $missing['bbox']['Countries']++;
//    }
//}
//foreach( $missing_bbox as $value ) {
//    if ( $value['level'] === 'admin1' ) {
//        $missing['bbox']['States']++;
//    }
//}
//foreach( $missing_bbox as $value ) {
//    if ( $value['level'] === 'admin2' ) {
//        $missing['bbox']['Counties']++;
//    }
//}
//foreach ( $missing['bbox'] as $key => $total ) {
//    print ucwords( $key ) . ' : ' . $total . PHP_EOL;
//}
//
//
//print PHP_EOL . PHP_EOL . PHP_EOL . PHP_EOL . date('Y-m-d H:i:s') . PHP_EOL;
///** END BUFFER CENSUS OUTPUT */
//
///** CREATE CENSUS FILE */
//$content = ob_get_contents();
//
//ob_end_clean();
//file_put_contents( $folders['root'] . 'totals.txt', $content ); // put copy in saturation folder
//print '#';
//
//$readme_content_beginning = '
//# Saturation Grid Project
//
//The Saturation Grid Project hopes to offer a cross-referenced grid for reporting on movement progress across the planet,
//while at the same time is location sensitive for activity in dangerous or anti-christian locations and compliance with
//increasing privacy laws like GDPR.
//
//The project serves to support the vision of consistently tracking church planting movement efforts globally in a way
// that allows networks and different organizations to share location sensitive reports to visualize and respond to
// areas of disciple making movement and areas where there is no disciple making movement.
//
//The project offers a global grid of unique location ids for countries, states, and counties,
//longitude/latitude, populations for those administrative areas, and the supporting geojson polygon files for
//lightweight application display.
//
//The source numbering system, longitude/latitude, and most population data and country coding is provide from
//[Geonames free geographic database](https://www.geonames.org/).
//
//The polygon data has been collected from both Geonames and the Open Street Map projects.
//
//The administrative boundary information (north, south, east, west) has been generated from currently available
//polygons by the Saturation Grid Project.
//
//The hierarchy data in columns parent_id, country_geonameid, admin1_geonameid, admin2_geonameid, admin3_geonameid has been
//generated from the Geonames Hierarchy table by the Saturation Grid Project. Edits were made to remove multiple parents
//that would cause unnecessary tree issues for the project purposes.
//
//## Tab Delimited Data Source
//`saturation-grid-geonames.tsv`
//
//`saturation-grid-polygons.tsv.zip`
//
//## Polygon_Collection Folder
//The polygons folder bundles the child administrative division for the geonameid in the title of the .geojson file.
//
//## Point_Collection Folder
//The points folder bundles the child administrative division of the geonameid in the title of the .geojson file.
//
//## Polygon Folder
//These geojson files are prepared for an individual administrative location. This is a single polygon or multipolygon for a single location.
//
//## Scripts Folder
//Contains PHP building scripts used to generate most of the project resources.
//
//## Project Overview
//
//```
//';
//
//$readme_content_ending = '
//```
//';
//file_put_contents( $folders['root'] . 'README.md', $readme_content_beginning . $content . $readme_content_ending );
//print '#';
//file_put_contents( $folders['docs'] . 'README.md', $readme_content_beginning . $content . $readme_content_ending );
//print '#';
///** END CREATE CENSUS FILE */
//
//
//
//
//
//
///** BEGIN MISSING LOCATIONS TXT OUTPUT */
//ob_start();
//
//print '
//MISSING POLYGONS REPORT
//-- MISSING POLYGONS: COUNTRIES ['.$missing['polygon']['Countries'].']
//-- MISSING POLYGONS: STATES (ADMIN1) ['.$missing['polygon']['States'].']
//-- MISSING POLYGONS: COUNTIES (ADMIN2) ['.$missing['polygon']['Counties'].']
//-- MISSING POLYGON COLLECTIONS: COUNTRIES ['.$missing['polygon_collection']['Countries'].']
//-- MISSING POLYGON COLLECTIONS: STATES (ADMIN1) ['.$missing['polygon_collection']['States'].']
//' . date('Y-m-d H:i:s') . PHP_EOL . PHP_EOL;
//
//
//
//// Single Polygons
//print PHP_EOL . '
//**********************************************************************
//*                                                                    *
//*                                                                    *
//*             MISSING POLYGONS: STATES (ADMIN1)                      *
//*                                                                    *
//*                                                                    *
//**********************************************************************
//' . PHP_EOL . PHP_EOL;
//$array = [];
//foreach( $states as $row ) {
//    if ( ! file_exists( $folders['polygon'] . $row['geonameid'] .  '.geojson') ) {
//        if ( ! isset( $array[$row['country']] ) ) {
//            $array[$row['country']] = [];
//        }
//        $array[$row['country']][] = $row;
//    }
//}
//ksort( $array );
//unset($array['']);
//foreach( $array as $key => $value ) {
//    print PHP_EOL . PHP_EOL . ucwords( $key ) . PHP_EOL;
//    foreach ( $value as $item ) {
//        print '-- (' . $item['geonameid'] . ') ' . $item['name'] . PHP_EOL;
//    }
//}
//print PHP_EOL . '
//**********************************************************************
//*                                                                    *
//*                                                                    *
//*             MISSING POLYGONS: COUNTIES (ADMIN2)                    *
//*                                                                    *
//*                                                                    *
//**********************************************************************
//' . PHP_EOL . PHP_EOL;
//$array = [];
//foreach( $counties as $row ) {
//    if ( ! file_exists( $folders['polygon'] . $row['geonameid'] .  '.geojson') ) {
//        if ( ! isset( $array[$row['country']] ) ) {
//            $array[$row['country']] = [];
//        }
//        if ( ! isset( $array[$row['country']][$row['state']] ) ) {
//            $array[$row['country']][$row['state']] = [];
//        }
//        $array[$row['country']][$row['state']][] = $row;
//    }
//}
//ksort( $array );
//unset($array['']);
//foreach( $array as $key => $state ) {
//    print PHP_EOL . PHP_EOL . ucwords( $key ) . PHP_EOL;
//    unset($state['']);
//    foreach( $state as $key => $value ) {
//        print '-- ' . ucwords( $key ) . PHP_EOL;
//        foreach ( $value as $item ) {
//            print '-- -- (' . $item['geonameid'] . ') ' . $item['name'] . PHP_EOL;
//        }
//    }
//
//}
//
//print PHP_EOL . '
//**********************************************************************
//*                                                                    *
//*                                                                    *
//*             MISSING POLYGON COLLECTIONS: COUNTRIES                 *
//*                                                                    *
//*                                                                    *
//**********************************************************************
//' . PHP_EOL . PHP_EOL;
//foreach( $countries as $country ) {
//    if ( ! file_exists( $folders['polygon_collection'] . $country['geonameid'] .  '.geojson') ) {
//        print '(' . $country['geonameid'] . ') ' . $country['name']  . PHP_EOL;
//    }
//}
//
//print PHP_EOL . '
//**********************************************************************
//*                                                                    *
//*                                                                    *
//*             MISSING POLYGON COLLECTIONS: STATES (ADMIN1)           *
//*                                                                    *
//*                                                                    *
//**********************************************************************
//' . PHP_EOL . PHP_EOL;
//$array = [];
//foreach( $states as $row ) {
//    if ( ! file_exists( $folders['polygon_collection'] . $row['geonameid'] .  '.geojson') ) {
//        if ( ! isset( $array[$row['country']] ) ) {
//            $array[$row['country']] = [];
//        }
//        $array[$row['country']][] = $row;
//    }
//}
//ksort( $array );
//unset($array['']);
//foreach( $array as $key => $value ) {
//    print PHP_EOL . PHP_EOL . ucwords( $key ) . PHP_EOL;
//    foreach ( $value as $item ) {
//        print '-- (' . $item['geonameid'] . ') ' . $item['name'] . PHP_EOL;
//    }
//}
///** END MISSING LOCATIONS TXT OUTPUT */
//
///** CREATE FILE MISSING LOCATIONS TXT */
//$content = ob_get_contents();
//ob_end_clean();
//
//file_put_contents( $folders['docs'] . 'missing_polygons.txt', $content ); // put copy in saturation folder
//print '#';
///** END SAVE MISSING LOCATIONS TXT */
//
//
//
///** CREATE MISSING STATES (ADMIN1) POLYGONS CSV */
//ob_start();
//foreach( $states as $admin1 ) {
//    if ( ! file_exists( $folders['polygon'] . $admin1['geonameid'] .  '.geojson') ) {
//        print $admin1['geonameid'] . ', "' . $admin1['name']. '","' . $admin1['country'] . '","' . $admin1['name']. ' ' . $admin1['country'] . '",""' . PHP_EOL;
//    }
//}
//$content = ob_get_contents();
//
//file_put_contents( $folders['docs_csv'] . 'missing_admin1_polygons.csv', $content );
//ob_end_clean();
///** END MISSING STATES POLYGONS */
//
//
///** CREATE MISSING COUNTIES (ADMIN2) POLYGONS CSV */
//ob_start();
//foreach( $counties as $admin2 ) {
//    if ( ! file_exists( $folders['polygon'] . $admin2['geonameid'] .  '.geojson') ) {
//        print $admin2['geonameid'] . ', "' . $admin2['name']. '","' . $admin2['country'] . '","' . $admin2['name']. ' ' . $admin2['country'] . '",""' . PHP_EOL;
//    }
//}
//$content = ob_get_contents();
//ob_end_clean();
//
//file_put_contents( $folders['docs_csv'] . 'missing_admin2_polygons.csv', $content );
//print '#';
///** END MISSING COUNTIES POLYGONS */
//
//
//
///** CREATE MISSING POPULATIONS CSV */
//ob_start();
//foreach( $missing_population as $value ) {
//    print $value['geonameid'] . ', "' . $value['name']. '","' . $value['country'] . '","' . $value['name']. ' ' . $value['country'] . '",'. $value['population'] . PHP_EOL;
//}
//$content = ob_get_contents();
//ob_end_clean();
//
//file_put_contents( $folders['docs_csv'] . 'missing_populations.csv', $content );
//print '#';
///** END MISSING COUNTIES POLYGONS */
//
///** CREATE MISSING POPULATIONS TXT */
//ob_start();
//print '
//**********************************************************************
//*                                                                    *
//*                                                                    *
//*                       MISSING POPULATIONS                          *
//*                                                                    *
//*                                                                    *
//**********************************************************************
//' . PHP_EOL . PHP_EOL;
//print date('Y-m-d H:i:s');
//$array = [];
//foreach( $missing_population as $value ) {
//    $array[$value['country']][] = '('. $value['geonameid'] . ' - ' . $value['level'] .') ' . $value['name'] ;
//}
//ksort( $array );
//unset($array['']);
//foreach( $array as $key => $value ) {
//    print PHP_EOL . PHP_EOL . ucwords( $key ) . PHP_EOL;
//    foreach ( $value as $item ) {
//        print '--- ' . $item . PHP_EOL;
//    }
//}
//$content = ob_get_contents();
//ob_end_clean();
//
//file_put_contents( $folders['docs'] . 'missing_populations.txt', $content );
//print '#';
///** END MISSING COUNTIES POLYGONS */
//
//
///** CREATE MISSING POPULATIONS TXT */
//ob_start();
//print '
//**********************************************************************
//*                                                                    *
//*                                                                    *
//*                       MISSING BOUNDING BOX INFO                    *
//*                                                                    *
//*                                                                    *
//**********************************************************************
//This refers to the north_latitude,south_latitude,west_longitude,east_logitude columns.
//' . PHP_EOL . PHP_EOL;
//print date('Y-m-d H:i:s');
//$array = [];
//foreach( $missing_bbox as $value ) {
//    $array[$value['country']][] = '('. $value['geonameid'] . ' - ' . $value['level'] .') ' . $value['name'] ;
//}
//ksort( $array );
//unset($array['']);
//foreach( $array as $key => $value ) {
//    print PHP_EOL . PHP_EOL . ucwords( $key ) . PHP_EOL;
//    foreach ( $value as $item ) {
//        print '--- ' . $item . PHP_EOL;
//    }
//}
//$content = ob_get_contents();
//ob_end_clean();
//
//file_put_contents( $folders['docs'] . 'missing_boundingbox_info.txt', $content );
//print '#';
///** END MISSING COUNTIES POLYGONS */
//
//
///** CREATE MISSING POPULATIONS TXT */
//ob_start();
//print '
//**********************************************************************
//*                                                                    *
//*                                                                    *
//*                       MISSING HIERARCHY                            *
//*                                                                    *
//*                                                                    *
//**********************************************************************
//' . PHP_EOL . PHP_EOL;
//print date('Y-m-d H:i:s') . PHP_EOL . PHP_EOL;
//$array = [];
//foreach( $missing_hierarchy as $value ) {
//    print  '('. $value['geonameid'] . ') ' . $value['name'] . PHP_EOL;
//}
//$content = ob_get_contents();
//ob_end_clean();
//
//file_put_contents( $folders['docs'] . 'missing_hierarchy.txt', $content );
//print '#';
///** END MISSING COUNTIES POLYGONS */
//
//
//
//
//
//
//
//
//
///*******************************************************************************************************
// *
// * Build Hierarchy Files
// *
// *******************************************************************************************************/
//print '#';
//
//// build list array
//$geonameid = '';
//$response = [];
//
//// pre-start list
//$start_geonameid = 6295630;
//$parent_object = mysqli_query( $con, "
//        SELECT parent_id, geonameid as id, name
//          FROM {$tables['geonames']}
//          WHERE parent_id = {$start_geonameid}
//          ORDER BY name ASC;
//    " );
//$parent = mysqli_fetch_all($parent_object, MYSQLI_ASSOC);
//$response['list'] = $parent;
//
//// build full results
//$all_object = mysqli_query( $con, "
//        SELECT parent_id, geonameid as id, name
//        FROM {$tables['geonames']};
//    " );
//$all = mysqli_fetch_all($all_object, MYSQLI_ASSOC);
//
//if ( empty( $all ) ) {
//    _no_results();
//}
//$menu_data = prepare_menu_array( $all );
//$response['text'] = build_locations_html_list( $start_geonameid, $menu_data, 0, 10 );
//
//function build_locations_html_list( $parent_id, $menu_data, $gen, $depth_limit ) {
//    $list = '';
//
//    if ( isset( $menu_data['parents'][$parent_id] ) && $gen < $depth_limit ) {
//        $gen++;
//        foreach ($menu_data['parents'][$parent_id] as $item_id)
//        {
//            switch( $gen ) {
//                case '0':
//                    $list .= '';
//                    break;
//                case '1':
//                    $list .= '';
//                    break;
//                case '2':
//                    $list .= '';
//                    break;
//                case '3':
//                    $list .= '---- ';
//                    break;
//                case '4':
//                    $list .= '---- ---- ';
//                    break;
//            }
//            if ( $gen === 2 ) {
//                $list .= PHP_EOL;
//            }
//            $list .= $menu_data['items'][ $item_id ]['name'] . ' (' . $item_id . ')' . PHP_EOL;
//            if ( $gen === 1 ) {
//                $list .= PHP_EOL;
//            }
//            $sub = build_locations_html_list( $item_id, $menu_data, $gen, $depth_limit );
//            if ( ! empty( $sub ) ) {
//                $list .= $sub;
//            }
//        }
//    }
//    return $list;
//}
//function prepare_menu_array( $query) {
//    // prepare special array with parent-child relations
//    $menu_data = array(
//        'items' => array(),
//        'parents' => array()
//    );
//
//    foreach ( $query as $menu_item )
//    {
//        $menu_data['items'][$menu_item['id']] = $menu_item;
//        $menu_data['parents'][$menu_item['parent_id']][] = $menu_item['id'];
//    }
//    return $menu_data;
//}
//function _no_results() {
//    return 'No Results';
//}
//
//file_put_contents( $folders['root'] . 'hierarchy.txt', $response['text'] );
//print '#';
//
//
//
//
//
///*******************************************************************************************************
// *
// * Build Available Polygon JSON and CSV
// *
// *******************************************************************************************************/
//
//// get list of all geojson
//$polygon = scandir( $folders['polygon'] );
//$polygon_collection = scandir( $folders['polygon_collection'] );
//$point_collection = scandir( $folders['point_collection'] );
//
///************************************************************************/
//// Create polygon
//$json = [];
//$csv = 'geonameid,has_polygon'.PHP_EOL;
//foreach( $polygon as $index => $file ) {
//    if ( preg_match( '/.geojson/', $file ) ) {
//        $id = (int) str_replace( '.geojson', '', $file );
//        $json[$id] = true;
//        $csv .= $id . ',1' . PHP_EOL;
//    }
//}
//$json_file = $folders['polygon'] . 'available_polygons.json';
//$content = json_encode($json);
//$response = file_put_contents( $json_file, $content.PHP_EOL );
//print '#';
//
//$csv_file = $folders['polygon'] . 'available_polygons.csv';
//$response = file_put_contents( $csv_file, $csv.PHP_EOL );
//print '#';
//
//
///************************************************************************/
//// Create polygon_collection
//$json = [];
//$csv = 'geonameid,has_polygon_collection'.PHP_EOL;
//foreach( $polygon_collection as $index => $file ) {
//    if ( preg_match( '/.geojson/', $file ) ) {
//        $id = (int) str_replace( '.geojson', '', $file );
//        $json[$id] = true;
//        $csv .= $id . ',1' . PHP_EOL;
//    }
//}
//$json_file = $folders['polygon_collection'] . 'available_polygons.json';
//$content = json_encode($json);
//$response = file_put_contents( $json_file, $content.PHP_EOL );
//print '#';
//
//$csv_file = $folders['polygon_collection'] . 'available_polygons.csv';
//$response = file_put_contents( $csv_file, $csv.PHP_EOL );
//print '#';
//
//
//
///************************************************************************/
//// Create polygon json
//$json = [];
//$csv = 'geonameid,has_point_collection'.PHP_EOL;
//foreach( $point_collection as $index => $file ) {
//    if ( preg_match( '/.geojson/', $file ) ) {
//        $id = (int) str_replace( '.geojson', '', $file );
//        $json[$id] = true;
//        $csv .= $id . ',1' . PHP_EOL;
//    }
//}
//$json_file = $folders['point_collection'] . 'available_polygons.json';
//$content = json_encode($json);
//$response = file_put_contents( $json_file, $content.PHP_EOL );
//
//print '#';
//$csv_file = $folders['point_collection'] . 'available_polygons.csv';
//$response = file_put_contents( $csv_file, $csv.PHP_EOL );
//print '#';
//
//
//
//
//
//
//
//
//
//
//
//print ' done!'.PHP_EOL;
//
//
//function quality_check( $folders, $output ) {
//
//    // builder folder array
//    $geojson_folders = [];
//    foreach( $folders as $index => $folder ) {
//        if ( $index === 'polygon' || $index === 'polygon_collection' || $index === 'point_collection' ) {
//            $geojson_folders[$index] = $folder;
//        }
//    }
//    print 'Quality Check'.PHP_EOL;
//    print_r($geojson_folders);
//
//    // build output folders
//    $quality_check_empty = $output['quality_check_empty'];
//    $quality_check_missing = $output['quality_check_missing'];
//
//
//    print date('H:i:s') . ' | Begin ' . PHP_EOL;
//
//    foreach ( $geojson_folders as $name => $folder ) {
//
//        print date('H:i:s') . ' | ' . $name . PHP_EOL;
//
//        ob_start();
//
//        $dir_raw = scandir( $folder );
//        foreach ( $dir_raw as $file_name ) {
//            if ( substr( $file_name, - 7 ) === 'geojson' ) {
//                $file = json_decode( file_get_contents( $folder . $file_name ), true );
//                if ( empty( $file ) ) {
//                    $move = rename( $folder . $file_name, $quality_check_empty . $name . '/' . $file_name );
//                    if ( $move ) {
//                        print date( 'H:i:s' ) . ' | (' . $file_name . ') Completely Empty File. Moved to "quality_check folder." ' . PHP_EOL;
//                    } else {
//                        print date( 'H:i:s' ) . ' | (' . $file_name . ') Empty file, but failed to move to "quality_check folder." ' . PHP_EOL;
//                    }
//                    continue;
//                }
//
//                $missing = 0;
//                foreach ( $file[ 'features' ] as $feature ) {
//                    if ( empty( $feature[ 'geometry' ] ) ) {
//                        $missing ++;
//                    }
//                }
//
//                if ( $missing ) {
//                    $move = rename( $folder . $file_name, $quality_check_missing . $name . '/' . $file_name );
//                    if ( $move ) {
//                        print date( 'H:i:s' ) . ' | (' . $file_name . ') Missing ' . $missing . ' fields. ' . PHP_EOL;
//                    } else {
//                        print date( 'H:i:s' ) . ' | (' . $file_name . ') Missing ' . $missing . ' fields. , but failed to move to "quality_check folder." ' . PHP_EOL;
//                    }
//                }
//            }
//        }
//
//        $content = ob_get_contents();
//
//        file_put_contents( $output[ 'quality_check' ] . 'quality_check_'.$name.'.txt', $content );
//
//        ob_end_clean();
//
//        print date('H:i:s') . ' | ' . $name . '. Done! ' . PHP_EOL;
//
//    }
//
//    print date('H:i:s') . ' | Finish ' . PHP_EOL;
//}
//
//
//// Close connections and buffering
//mysqli_close($con);
