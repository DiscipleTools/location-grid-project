<?php

// Extend PHP limits for large processing
ini_set('memory_limit', '50000M');

$start_timestamp = date('H:i:s');

print '**************************************************************'. PHP_EOL;
print date('H:i:s') . ' | START SCRIPT'. PHP_EOL;
print '**************************************************************'. PHP_EOL;


/*************************************************************************************************************/
/* SETUP ENVIORNMENT
/*************************************************************************************************************/
$table = [
    'lg' => 'location_grid',
    'geo' => 'location_grid_geometry',
    'dt' => 'dt_location_grid',
];
$output = [
    'root' => getcwd() . '/',
];
foreach ( $output as $dirname ) {
    if ( ! is_dir( $dirname ) ) {
        mkdir($dirname, 0755, true);
    }
}

// define database connection
if ( ! file_exists( 'connect_params.json') ) {
    $content = '{"host": "","username": "","password": "","database": ""}';
    file_put_contents( 'connect_params.json', $content );
}
$params = json_decode( file_get_contents( "connect_params.json" ), true );
if ( empty( $params['host'] ) ) {
    print 'You have just created the connect_params.json file, but you still need to add database connection information.
Please, open the connect_params.json file and add host, username, password, and database information.' . PHP_EOL;
    exit();
}
$con = mysqli_connect( $params['host'], $params['username'], $params['password'],$params['database']);
if (!$con) {
    echo 'mysqli Connection FAILED. Check parameters inside connect_params.json file.' . PHP_EOL;
    exit();
}

// test expected location_grid table
$exists = mysqli_query( $con, "
        SELECT 1 FROM {$table['lg']} LIMIT 1;
    " );
if ( ! $exists ) {
    print 'Could not connect with location_grid source table.' . PHP_EOL;
    exit();
}
// test expected location_grid_geometry table
$exists = mysqli_query( $con, "
        SELECT 1 FROM {$table['geo']} LIMIT 1;
    " );
if ( ! $exists ) {
    print 'Could not connect with location_grid_geometry source table.' . PHP_EOL;
    exit();
}
/*************************************************************************************************************/
// END SETUP
/*************************************************************************************************************/


/** CREATE README FILE */
$readme_content_beginning = '
# LOCATION GRID PROJECT v2

The Location Grid Project hopes to offer a cross-referenced grid for reporting on movement progress across the planet, 
while at the same time is location sensitive for activity in dangerous or anti-christian locations and compliance with 
increasing privacy laws like GDPR.

The project serves to support the vision of consistently tracking church planting movement efforts globally in a way
 that allows networks and different organizations to share location sensitive reports to visualize and respond to
 areas of disciple making movement and areas where there is no disciple making movement.

The project offers a global grid of unique location ids for countries, states, and counties, 
longitude/latitude, populations for those administrative areas, and the supporting geojson polygon files for 
lightweight application display. 

The polygon source data began with GADM public polygon sets and then the geojson files were generated and keyed to the grid system. 

The administrative boundary information (north, south, east, west) has been generated from currently available 
polygons by the Location Grid Project. 

Longitude and latitude centerpoint generated from the polygon data.

The hierarchy data in columns parent_id, admin0_grid_id, admin1_grid_id, admin2_grid_id, admin3_grid_id, admin4_grid_id, admin5_grid_id has been
generated by the Location Grid Project.

-----

* [Databases](#databases)
    * [The Location Grid Table](#the-location_grid-table)
    * [The location_grid_geometry table](#the-location_grid_geometry-table)
    * [The location-grid-facts](#the-location-grid-facts)
    * [The location-grid-names](#the-location-grid-names)
    * [The location-grid-gis-layers](#the-location-grid-gis-layers)
* [Grid_ID Ranges](#grid_id-ranges)
* [Table Structures](#table-structures)
* [Data](#data)
    * [Number Of Records Per Country and Level](#number-of-records-per-country-and-level)
    * [Number of Records by Levels](#number-of-records-by-levels)
    * [GIS Layers Download Links ](#gis-layers-download-links)
    * [Countries With Levels of Administration](#countries-with-levels-of-administration)
* [Location Grid Hierarchy (txt file)](https://raw.githubusercontent.com/DiscipleTools/location-grid-project/master/hierarchy.txt)

-----


## DATABASES

### The location_grid table 
The location grid table is a MYSQL table with 380,000 records for the administrative levels of the world. Based
on the GADM polygon set. This table adds hierarchy, geonames cross-reference, bounding boxes, longitude and latitude for centerpoint,
country_codes, and level descriptions.

[Download Location Grid SQL Table](https://storage.googleapis.com/location-grid-source-data-v2/location_grid.sql.zip)
(15.8 MB)


### The location_grid_geometry table 
The location_grid_geometry table has all polygons for each of the 380,000 administrative units cross-referenced
to the location_grid table by grid_id.

[Download Location_Grid_Geometry](https://storage.googleapis.com/location-grid-source-data-v2/location_grid_geometry.sql.zip)
(1.94 GB)
 
 
### The location-grid-facts
The location grid facts table is a sql table that can be joined to the location grid and contains faith, language, and religion 
breakdown information. 

[Download Location Grid Facts](https://storage.googleapis.com/location-grid-source-data-v2/location_grid_facts.sql.zip)
(1.3 MB)

 
### The location-grid-names
The location grid names table is offers a table with the location names translated into numerous top languages.  

[Download Location Grid Facts](https://storage.googleapis.com/location-grid-source-data-v2/location_grid_names.sql.zip)
(27.1 MB)

 
### The location-grid-cities
The location grid cities table is offers a cross referenced and location grid geocoded list of cities derived from the Geonames dataset.  

[Download Location Grid Facts](https://storage.googleapis.com/location-grid-source-data-v2/location_grid_cities.sql.zip)
(6.2 MB)
 
 
### The location-grid-people-groups
The location grid people groups table is offers a cross referenced and location grid geocoded list of people groups provided by the Joshua Project database.  

[Download Location Grid Facts](https://storage.googleapis.com/location-grid-source-data-v2/location_grid_people_groups.sql.zip)
(1 MB)
 
 
### The location-grid-mirror
The location grid mirror is a folder containing three folders: low, high, collection. The low and high
folders contain .geojson files named by grid_id containing the polygon or
multipolygon for the administrative unit and properties containing name, level names, and centerpoints. Those files
in the low folder are compressed for web delivery, the high folder contains full resolution polygons. The 
collection folder contains .geojson files named by grid_id that contain a collection of the next
level administrative polygons. i.e. the {state of colorado}.geojson file contains all the counties for Colorado
in the single .geojson file. Each sub-administrative unit in the collection has properties including name, lng/lat centerpoint,
and admin level data.

[Download Location Grid Mirror](https://storage.googleapis.com/location-grid-source-data-v2/location-grid-mirror.zip)
(4.06 GB)


### The location-grid-gis-layers
The location grid gis layers is an export of the location grid building the location grid in layers more approriate for importing
into GIS systems. The layers are arranges as {2 digit language code}_(administrative level name}.geojson. For example, "us_admin2.geojson"
contains all the Administrative 2 (counties or admin2) level polygons for the United States (us).

[Download Location GIS Layers](https://storage.googleapis.com/location-grid-source-data-v2/location-grid-gis-layers.zip)
(1.83 GB)


## Grid_ID Ranges

| Range | Description |
| ------ | ----- |
|100,000,000 - 200,000,000 | One hundred million to two hundred million is the id range for the location grid global admin levels |
|1,000,000,000 + | 1 billion and higher is reserved for custom locations |

## TABLE STRUCTURES

location_grid table:
```apacheconfig
CREATE TABLE `location_grid` (
  `grid_id` bigint(20) NOT NULL AUTO_INCREMENT,
  `name` varchar(200) NOT NULL DEFAULT \'\',
  `level` float DEFAULT NULL,
  `level_name` varchar(7) DEFAULT NULL,
  `country_code` varchar(10) DEFAULT NULL,
  `admin0_code` varchar(10) DEFAULT NULL,
  `admin1_code` varchar(20) DEFAULT NULL,
  `admin2_code` varchar(20) DEFAULT NULL,
  `admin3_code` varchar(20) DEFAULT NULL,
  `admin4_code` varchar(20) DEFAULT NULL,
  `admin5_code` varchar(20) DEFAULT NULL,
  `parent_id` bigint(20) DEFAULT NULL,
  `admin0_grid_id` bigint(20) DEFAULT NULL,
  `admin1_grid_id` bigint(20) DEFAULT NULL,
  `admin2_grid_id` bigint(20) DEFAULT NULL,
  `admin3_grid_id` bigint(20) DEFAULT NULL,
  `admin4_grid_id` bigint(20) DEFAULT NULL,
  `admin5_grid_id` bigint(20) DEFAULT NULL,
  `longitude` float DEFAULT NULL,
  `latitude` float DEFAULT NULL,
  `north_latitude` float DEFAULT NULL,
  `south_latitude` float DEFAULT NULL,
  `east_longitude` float DEFAULT NULL,
  `west_longitude` float DEFAULT NULL,
  `population` bigint(20) NOT NULL DEFAULT \'0\',
  `modification_date` date DEFAULT NULL,
  `geonames_ref` bigint(20) DEFAULT NULL,
  `wikidata_ref` varchar(20) DEFAULT NULL,
  PRIMARY KEY (`grid_id`),
  KEY `level` (`level`),
  KEY `latitude` (`latitude`),
  KEY `longitude` (`longitude`),
  KEY `admin0_code` (`admin0_code`),
  KEY `admin1_code` (`admin1_code`),
  KEY `admin2_code` (`admin2_code`),
  KEY `admin3_code` (`admin3_code`),
  KEY `admin4_code` (`admin4_code`),
  KEY `admin5_code` (`admin5_code`),
  KEY `country_code` (`country_code`),
  KEY `north_latitude` (`north_latitude`),
  KEY `south_latitude` (`south_latitude`),
  KEY `parent_id` (`parent_id`),
  KEY `east_longitude` (`east_longitude`),
  KEY `west_longitude` (`west_longitude`),
  KEY `admin0_grid_id` (`admin0_grid_id`),
  KEY `admin1_grid_id` (`admin1_grid_id`),
  KEY `admin2_grid_id` (`admin2_grid_id`),
  KEY `admin3_grid_id` (`admin3_grid_id`),
  KEY `admin4_grid_id` (`admin4_grid_id`),
  KEY `admin5_grid_id` (`admin5_grid_id`),
  KEY `level_name` (`level_name`),
  FULLTEXT KEY `name` (`name`)
) ENGINE=InnoDB AUTO_INCREMENT=100386738 DEFAULT CHARSET=utf8;
```

location_grid_geometry:
```apacheconfig
CREATE TABLE `location_grid_geometry` (
  `grid_id` bigint(20) NOT NULL AUTO_INCREMENT,
  `geoJSON` longtext,
  PRIMARY KEY (`grid_id`)
) ENGINE=InnoDB AUTO_INCREMENT=100386738 DEFAULT CHARSET=utf8;
```

location_grid_facts
```apacheconfig
CREATE TABLE `location_grid_facts` (
  `grid_id` bigint(22) unsigned NOT NULL,
  `name` varchar(255) DEFAULT NULL,
  `full_name` varchar(255) DEFAULT NULL,
  `admin0_name` varchar(255) DEFAULT NULL,
  `admin0_grid_id` bigint(22) unsigned NOT NULL,
  `admin1_grid_id` bigint(22) DEFAULT NULL,
  `admin2_grid_id` bigint(22) DEFAULT NULL,
  `admin3_grid_id` bigint(22) DEFAULT NULL,
  `admin4_grid_id` bigint(22) DEFAULT NULL,
  `admin5_grid_id` bigint(22) DEFAULT NULL,
  `level` float DEFAULT NULL,
  `birth_rate` float DEFAULT NULL,
  `death_rate` float DEFAULT NULL,
  `growth_rate` float DEFAULT NULL,
  `believers` int(20) DEFAULT NULL,
  `christian_adherents` int(20) DEFAULT NULL,
  `non_christians` int(20) DEFAULT NULL,
  `primary_language` varchar(255) DEFAULT NULL,
  `primary_religion` varchar(255) DEFAULT NULL,
  `percent_believers` float DEFAULT NULL,
  `percent_christian_adherents` float DEFAULT NULL,
  `percent_non_christians` float DEFAULT NULL,
  PRIMARY KEY (`grid_id`),
  KEY `admin0_grid_id` (`admin0_grid_id`),
  KEY `level` (`level`),
  KEY `grid_id` (`grid_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
```

location_grid_names
``` apacheconfig
CREATE TABLE `location_grid_names` (
  `id` bigint(22) unsigned NOT NULL AUTO_INCREMENT,
  `grid_id` bigint(22) NOT NULL,
  `name` varchar(255) NOT DEFAULT NULL,
  `full_name` varchar(255) NOT NULL,
  `admin0_name` varchar(255) DEFAULT NULL,
  `level` int(2) DEFAULT NULL,
  `language_code` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `grid_id` (`grid_id`),
  KEY `level` (`level`),
  KEY `language_code` (`language_code`),
  KEY `admin0_name` (`admin0_name`)
) ENGINE=InnoDB AUTO_INCREMENT=2407512 DEFAULT CHARSET=utf8;
```

location_grid_cities
``` apacheconfig
CREATE TABLE `location_grid_cities` (
  `id` bigint(11) unsigned NOT NULL AUTO_INCREMENT,
  `geonameid` bigint(11) unsigned NOT NULL,
  `name` varchar(255) DEFAULT NULL,
  `full_name` varchar(255) DEFAULT NULL,
  `admin0_name` varchar(255) DEFAULT NULL,
  `latitude` float DEFAULT NULL,
  `longitude` float DEFAULT NULL,
  `population` int(11) DEFAULT NULL,
  `timezone` varchar(40) DEFAULT NULL,
  `admin0_grid_id` bigint(22) DEFAULT NULL,
  `admin1_grid_id` bigint(22) DEFAULT NULL,
  `admin2_grid_id` bigint(22) DEFAULT NULL,
  `admin3_grid_id` bigint(22) DEFAULT NULL,
  `admin4_grid_id` bigint(22) DEFAULT NULL,
  `admin5_grid_id` bigint(22) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `geonameid` (`geonameid`),
  KEY `latitude` (`latitude`),
  KEY `longitude` (`longitude`),
  KEY `admin0_grid_id` (`admin0_grid_id`),
  KEY `admin1_grid_id` (`admin1_grid_id`),
  KEY `admin2_grid_id` (`admin2_grid_id`),
  KEY `admin3_grid_id` (`admin3_grid_id`),
  KEY `admin4_grid_id` (`admin4_grid_id`)
) ENGINE=InnoDB AUTO_INCREMENT=198714 DEFAULT CHARSET=utf8;
```


location_grid_people_groups
``` apacheconfig
CREATE TABLE `location_grid_people_groups` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(255) DEFAULT NULL,
  `longitude` float DEFAULT NULL,
  `latitude` float DEFAULT NULL,
  `lg_name` varchar(255) DEFAULT NULL,
  `lg_full_name` varchar(255) DEFAULT NULL,
  `admin0_name` varchar(255) DEFAULT NULL,
  `admin0_grid_id` bigint(22) DEFAULT NULL,
  `admin1_grid_id` bigint(22) DEFAULT NULL,
  `admin2_grid_id` bigint(22) DEFAULT NULL,
  `admin3_grid_id` bigint(22) DEFAULT NULL,
  `admin4_grid_id` bigint(22) DEFAULT NULL,
  `admin5_grid_id` bigint(22) DEFAULT NULL,
  `population` int(11) DEFAULT NULL,
  `JPScale` varchar(255) DEFAULT NULL,
  `LeastReached` varchar(255) DEFAULT NULL,
  `PrimaryLanguageName` varchar(255) DEFAULT NULL,
  `PrimaryReligion` varchar(255) DEFAULT NULL,
  `PercentAdherents` varchar(255) DEFAULT NULL,
  `PercentEvangelical` varchar(255) DEFAULT NULL,
  `PeopleCluster` varchar(255) DEFAULT NULL,
  `AffinityBloc` varchar(255) DEFAULT NULL,
  `PeopleID3` int(11) DEFAULT NULL,
  `ROP3` int(11) DEFAULT NULL,
  `ROG3` varchar(255) DEFAULT NULL,
  `pg_unique_key` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `admin0_grid_id` (`admin0_grid_id`),
  KEY `admin1_grid_id` (`admin1_grid_id`),
  KEY `admin2_grid_id` (`admin2_grid_id`),
  KEY `latitude` (`latitude`),
  KEY `longitude` (`longitude`),
  KEY `admin3_grid_id` (`admin3_grid_id`),
  KEY `admin4_grid_id` (`admin4_grid_id`),
  KEY `admin5_grid_id` (`admin5_grid_id`)
) ENGINE=InnoDB AUTO_INCREMENT=17460 DEFAULT CHARSET=utf8;
```

# DATA
';


$content = PHP_EOL . '';

/**
 * Number Of Records Per Country and Level
 */
$query = mysqli_query( $con, "
    SELECT 
    (SELECT n.name FROM {$table['lg']} as n WHERE n.admin0_code = l.admin0_code AND level = 0 LIMIT 1) as name, 
    l.admin0_code, 
    l.level_name, 
    count(*) as count
    FROM {$table['lg']} as l 
    GROUP BY l.admin0_code, l.level_name;
" );
$break_down = mysqli_fetch_all($query, MYSQLI_ASSOC);

$content .= '

## Number Of Records Per Country and Level

| Name | Admin0 Code | Level Name | Number of Records |
| ---- | ---- | ---- | ---- |
';

foreach ( $break_down as $value ) {
    $content .= '|' . $value['name'] .'|' . $value['admin0_code'] .'|' . $value['level_name'] .'|' . $value['count'] .'|' . PHP_EOL;
}

$content .= PHP_EOL . PHP_EOL;





/**
 * Numbers of Records by Levels
 */
$query = mysqli_query( $con, "
    SELECT level_name, count(*) as count FROM {$table['lg']} GROUP BY level_name;
" );
$level_list = mysqli_fetch_all($query, MYSQLI_ASSOC);

$content .= '

## Number of Records by Levels

| Level Name | Number of Records |
| ---- | ---- | 
';

foreach ( $level_list as $value ) {
    $content .= '|' . $value['level_name'] .'|' . $value['count'] .'|' . PHP_EOL;
}

$content .= PHP_EOL;



/**
 * GIS File List
 */
$query = mysqli_query( $con, "
    SELECT 
    (SELECT n.name FROM {$table['lg']} as n WHERE n.admin0_code = l.admin0_code AND level = 0 LIMIT 1) as name,
    l.country_code,
    l.admin0_code, 
    l.level_name, 
    count(*) as count
    FROM {$table['lg']} as l 
    GROUP BY l.admin0_code, l.level_name, l.country_code;
" );
$break_down = mysqli_fetch_all($query, MYSQLI_ASSOC);

$content .= '

## GIS Layers Download Links 

| Name | Admin0 Code | Level Name | Number of Polygons | GIS Layer Link |
| ---- | ---- | ---- | ---- | ---- |
';

foreach ( $break_down as $value ) {
    if ( $value['level_name'] === 'world') {
        continue;
    }
    $content .= '|' . $value['name'] .'|' . $value['admin0_code'] .'|' . $value['level_name'] .'|' . $value['count'] .'|' . '['.strtolower( $value['admin0_code'] ).'_'.strtolower( $value['level_name'] ) .'.geojson](https://storage.googleapis.com/location-grid-gis-layers/'.strtolower( $value['admin0_code'] ).'_'.strtolower( $value['level_name'] ) .'.geojson) |'  . PHP_EOL;
}

$content .= PHP_EOL . PHP_EOL;



/**
 * Countries per Admin Level
 */
$query = mysqli_query( $con, "
    SELECT 
    (SELECT n.name FROM {$table['lg']} as n WHERE n.admin0_code = l.admin0_code AND level = 0 LIMIT 1) as name, 
    l.admin0_code, 
    l.level_name, 
    count(*) as count
    FROM {$table['lg']} as l 
    GROUP BY l.admin0_code, l.level_name;
" );
$break_down = mysqli_fetch_all($query, MYSQLI_ASSOC);

$content .= PHP_EOL . '## Countries With Levels of Administration'. PHP_EOL. PHP_EOL;

$admin_level = [];
foreach ( $break_down as $value ) {
    if ( $value['level_name'] === 'world') {
        continue;
    }
    if ( ! isset( $admin_level[$value['level_name']] ) ) {
        $admin_level[$value['level_name']] = [];
    }
    $admin_level[$value['level_name']][] = $value;
}

foreach ( $admin_level as $key => $level ) {

    $content .= PHP_EOL . PHP_EOL . '### ' . strtoupper( $key ) . PHP_EOL  . 'These countries have `' . $key . '` level records and polygons:'. PHP_EOL . PHP_EOL ;
    foreach ( $level as $index => $value ) {
        if ( $index !== 0 ) {
            $content .= ', ';
        }
        $content .= $value['name'];
    }
    $content .= PHP_EOL . PHP_EOL . '-----' . PHP_EOL . PHP_EOL;

}

$content .= PHP_EOL . PHP_EOL;


// build readme
$readme_content_ending = '';
file_put_contents( 'README.md', $readme_content_beginning . $content . $readme_content_ending );

// build index.html
$html_content_beginning = '<!DOCTYPE html><html lang="en"><head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Location Grid Project</title>
    <script src="https://cdn.jsdelivr.net/npm/showdown@2.0.3/dist/showdown.min.js"></script>
  </head>
  <body><div id="content">';
$html_content_ending = '</div><script type="text/javascript">
    window.converter = new showdown.Converter({tables: true})
    window.html_content     = window.converter.makeHtml(document.getElementById("content").textContent)
    document.getElementById("content").innerHTML = window.html_content
</script></body></html>';

file_put_contents( 'index.html', $html_content_beginning . $readme_content_beginning . $content . $readme_content_ending . $html_content_ending );

print '#';
/** END CREATE CENSUS FILE */





/*******************************************************************************************************
 *
 * Build Hierarchy Files
 *
 *******************************************************************************************************/
print '#';
// build list array
$grid_id = '';
$response = [];
// pre-start list
$start_grid_id = 1;
$parent_object = mysqli_query( $con, "
        SELECT parent_id, grid_id as id, name 
          FROM {$table['lg']} 
          WHERE parent_id = {$start_grid_id} 
          ORDER BY name ASC;
    " );
$parent = mysqli_fetch_all($parent_object, MYSQLI_ASSOC);
$response['list'] = $parent;
// build full results
$all_object = mysqli_query( $con, "
        SELECT parent_id, grid_id as id, name 
        FROM {$table['lg']};
    " );
$all = mysqli_fetch_all($all_object, MYSQLI_ASSOC);
if ( empty( $all ) ) {
    _no_results();
}
$menu_data = prepare_menu_array( $all );
$response['text'] = PHP_EOL . 'LOCATION GRID HIERARCHY' . PHP_EOL . PHP_EOL . build_locations_html_list( $start_grid_id, $menu_data, 0, 10 );
function build_locations_html_list( $parent_id, $menu_data, $gen, $depth_limit ) {
    $list = '';
    if ( isset( $menu_data['parents'][$parent_id] ) && $gen < $depth_limit ) {
        $gen++;
        foreach ($menu_data['parents'][$parent_id] as $item_id)
        {
            switch( $gen ) {
                case '0':
                    $list .= '';
                    break;
                case '1':
                    $list .= '';
                    break;
                case '2':
                    $list .= '---- ';
                    break;
                case '3':
                    $list .= '---- ---- ';
                    break;
                case '4':
                    $list .= '---- ---- ---- ';
                    break;
                case '5':
                    $list .= '---- ---- ---- ---- ';
                    break;
                case '6':
                    $list .= '---- ---- ---- ---- ---- ';
                    break;
                case '7':
                    $list .= '---- ---- ---- ---- ---- ---- ';
                    break;
            }
            $list .= $menu_data['items'][ $item_id ]['name'] . ' (' . $item_id . ')' . PHP_EOL;
            if ( $gen === 1 ) {
                $list .= PHP_EOL;
            }
            $sub = build_locations_html_list( $item_id, $menu_data, $gen, $depth_limit );
            if ( ! empty( $sub ) ) {
                $list .= $sub;
            }
            if ( $gen === 1 ) {
                $list .= PHP_EOL . PHP_EOL . '-------------------------------------------------------------------------------------------' . PHP_EOL . PHP_EOL . PHP_EOL;
            }
        }
    }
    return $list;
}
function prepare_menu_array( $query) {
    // prepare special array with parent-child relations
    $menu_data = array(
        'items' => array(),
        'parents' => array()
    );
    foreach ( $query as $menu_item )
    {
        $menu_data['items'][$menu_item['id']] = $menu_item;
        $menu_data['parents'][$menu_item['parent_id']][] = $menu_item['id'];
    }
    return $menu_data;
}
function _no_results() {
    return 'No Results';
}

file_put_contents( 'hierarchy.txt', $response['text'] );
print '#';


print '**************************************************************'. PHP_EOL;
print date('H:i:s') . ' | END SCRIPT'. PHP_EOL;
print '**************************************************************'. PHP_EOL;
mysqli_close($con);
die();